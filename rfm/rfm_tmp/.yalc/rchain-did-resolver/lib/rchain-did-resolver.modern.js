import{http as r,utils as t}from"rchain-toolkit";import{toString as e}from"uint8arrays";import{ec as i}from"elliptic";const{readBoxTerm:n}=require("rchain-token"),o=new i("secp256k1");function s(){const r=new Map;return async(t,e)=>{if(t.params&&"true"===t.params["no-cache"])return await e();const i=r.get(t.did);if(void 0!==i)return i;const n=await e();return null!==n&&r.set(t.did,n),n}}function c(r,t){return t()}const a=new RegExp("^did:([a-zA-Z0-9_]+):([a-zA-Z0-9_.-]+(:[a-zA-Z0-9_.-]+)*)((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$");function u(r){if(""===r||!r)throw new Error("Missing DID");const t=r.match(a);if(t){const e={did:`did:${t[1]}:${t[2]}`,method:t[1],id:t[2],didUrl:r};if(t[4]){const r=t[4].slice(1).split(";");e.params={};for(const t of r){const r=t.split("=");e.params[r[0]]=r[1]}}return t[6]&&(e.path=t[6]),t[7]&&(e.query=t[7].slice(1)),t[8]&&(e.fragment=t[8].slice(1)),e}throw new Error(`Invalid DID ${r}`)}class l{constructor(r={},t){this.registry=r,this.cache=!0===t?s():t||c}async resolve(r){const t=u(r),e=this.registry[t.method];if(e){const r=await this.cache(t,()=>e(t.did,t,this));if(null==r)throw new Error(`resolver returned null for ${t.did}`);return r}throw new Error(`Unsupported DID method: '${t.method}'`)}}function d(r){const t=o.keyFromPublic(r,"hex").getPublic(!0,"array"),i=new Uint8Array(t.length+2);return i[0]=231,i[1]=1,i.set(t,2),`did:key:z${e(i,"base58btc")}`}function p(){return{rchain:async function(e,i,o){var s;let c;c=n({masterRegistryUri:i.id,boxId:null==(s=i.path)?void 0:s.substring(1)});const a=await r.exploreDeploy("https://gracious-pare-6c4c99.netlify.app",{term:c}),u=t.rhoValToJs(JSON.parse(a).expr[0]),l=d(u.publicKey),p=l.substr(8),h=l+"#"+p;return{id:l,publicKey:[{id:h,type:"Secp256k1VerificationKey2018",controller:h,publicKeyHex:u.publicKey}]}}}}export{l as Resolver,d as encodeDIDFromPubKey,p as getResolver,s as inMemoryCache,c as noCache,u as parse};
//# sourceMappingURL=rchain-did-resolver.modern.js.map
